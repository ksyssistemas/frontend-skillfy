name: Remote Deployment Dev
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install SSH Client
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Get Short Commit Hash
      id: get_commit_hash
      run: |
        SHORT_HASH=$(git rev-parse --short=7 HEAD)
        echo "SHORT_HASH=$SHORT_HASH" >> $GITHUB_ENV
        echo "Commit Hash capturado: $SHORT_HASH"

    - name: Deploy via SSH
      env:
        SSH_HOST: ${{ secrets.DEV_SSH_HOST }}
        SSH_USER: ${{ secrets.DEV_SSH_USER }}
        SSH_PASSWORD: ${{ secrets.DEV_SSH_PASSWORD }}
        SHORT_HASH: ${{ env.SHORT_HASH }}
      run: |
        SSHPASS=$SSH_PASSWORD sshpass -e ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
        set -e
          cd /root/dev/frontend-skillfy

          # Atualizando arquivos do GitHub
          git pull origin dev

          # Debug: Exibindo hash no servidor
          echo "Hash no servidor: $SHORT_HASH"

          # Criar ou atualizar o .env.tmp com o HASH
          echo "HASH=$SHORT_HASH" > .env.tmp

          # Se .env já existir, mesclar o conteúdo
          if [ -f .env ]; then
            cat .env >> .env.tmp
          fi

          # Mover .env.tmp para .env
          mv .env.tmp .env

          # Parar e remover o contêiner existente, se existir
          CONTAINER_ID=$(docker ps -q --filter "name=frontend-")
          if [ -n "$CONTAINER_ID" ]; then
            echo "Parando e removendo o contêiner existente: $CONTAINER_ID"
            docker stop $CONTAINER_ID
            docker rm $CONTAINER_ID
          else
            echo "Nenhum contêiner existente encontrado"
          fi

          # Reconstruir a imagem Docker sem cache
          docker-compose build --no-cache

          # Iniciar o novo contêiner passando a variável de ambiente
          echo "Iniciando contêiner com HASH: $SHORT_HASH"
          HASH=$SHORT_HASH docker-compose up -d

          # Aguardar até que o contêiner esteja rodando
          echo "Aguardando o contêiner ser iniciado..."
          sleep 5

          # Capturar o ID do novo contêiner
          NEW_CONTAINER_ID=$(docker ps -q --filter "name=frontend-" | head -n 1)
          echo "ID do novo contêiner: $NEW_CONTAINER_ID"

          # Renomear o contêiner com o commit hash
          if [ -n "$NEW_CONTAINER_ID" ]; then
            echo "Renomeando o contêiner com o hash: $SHORT_HASH"
            docker rename $NEW_CONTAINER_ID frontend-$SHORT_HASH
          else
            echo "Erro: Nenhum contêiner encontrado para renomear"
            exit 1
          fi

          # Limpar arquivos temporários
          rm -f .env.tmp
        EOF
