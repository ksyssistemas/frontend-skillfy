name: Remote Deployment Dev
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install SSH Client
        run: sudo apt-get install -y sshpass

      # Obter o hash curto do commit e garantir que seja exportado para o ambiente
      - name: Get Short Commit Hash
        id: get_commit_hash
        run: echo "SHORT_HASH=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      # Exibir o hash para verificação
      - name: Check Short Commit Hash
        run: echo "Short Commit Hash: ${{ env.SHORT_HASH }}"  # Exibe o hash curto para garantir que está correto

      - name: Deploy via SSH
        env:
          SSH_HOST: ${{ secrets.DEV_SSH_HOST }}
          SSH_USER: ${{ secrets.DEV_SSH_USER }}
          SSH_PASSWORD: ${{ secrets.DEV_SSH_PASSWORD }}
          SHORT_HASH: ${{ env.SHORT_HASH }}  # Usa o hash do commit obtido
        run: |
          SSHPASS=$SSH_PASSWORD sshpass -e ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            cd /root/dev/frontend-skillfy

            # Atualizar arquivos do GitHub
            git pull origin dev

            # Criar ou atualizar o .env.tmp com o HASH
            echo "HASH=${{ env.SHORT_HASH }}" > .env.tmp

            # Se o .env já existir, acrescentar seu conteúdo ao .env.tmp
            if [ -f .env ]; then
              cat .env >> .env.tmp
            fi

            # Mover o .env.tmp para .env
            mv .env.tmp .env

            # Verificar o conteúdo de .env para debug
            cat .env

            # Parar e remover o container existente, se houver
            CONTAINER_ID=\$(docker ps -q --filter "name=frontend-")
            if [ -n "\$CONTAINER_ID" ]; then
              docker stop \$CONTAINER_ID
              docker rm \$CONTAINER_ID
            fi

            # Rebuild da imagem Docker sem cache para garantir que as mudanças sejam aplicadas
            docker-compose build --no-cache

            # Subir o novo container
            docker-compose up -d

            # Aguarde alguns segundos para garantir que o contêiner esteja em execução
            sleep 5

            # Obter o ID do contêiner em execução
            CONTAINER_ID=\$(docker ps -q --filter "name=frontend-")

            # Renomear o container para incluir o hash do commit
            if [ -n "\$CONTAINER_ID" ]; then
              docker rename \$CONTAINER_ID frontend-${{ env.SHORT_HASH }}
            else
              echo "Error: No container found to rename"
              exit 1
            fi
          EOF
