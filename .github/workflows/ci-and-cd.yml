name: CI and Deploy Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  # Job para Continuous Integration
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install dependencies
        run: yarn install  
      - name: Build
        run: yarn build  
      - name: Start the application
        run: yarn start &
      - name: Wait for application to start
        run: sleep 5
      - name: Test application
        run: curl http://localhost:3000 
      - name: Stop the application
        run: pkill -f "node"

  # Job para Remote Deployment
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Isso garante que o deploy só acontece após o build
    steps:
      - uses: actions/checkout@v3

      - name: Install SSH Client
        run: sudo apt-get install -y sshpass

      - name: Get Short Commit Hash
        id: get_commit_hash
        run: echo "SHORT_HASH=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      - name: Deploy via SSH
        env:
          SSH_HOST: ${{ secrets.DEV_SSH_HOST }}
          SSH_USER: ${{ secrets.DEV_SSH_USER }}
          SSH_PASSWORD: ${{ secrets.DEV_SSH_PASSWORD }}
          SHORT_HASH: ${{ env.SHORT_HASH }}
        run: |
          sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            cd /root/dev/frontend-skillfy || exit

            # Limpar o arquivo .env.tmp
            echo "" > .env.tmp
            
            # Atualizando arquivos do GitHub
            git pull origin dev
            
            # Parar e remover o contêiner existente, se existir
            CONTAINER_ID=\$(docker ps -q --filter "name=frontend-")
            if [ -n "\$CONTAINER_ID" ]; then
              echo "Parando e removendo o contêiner existente: \$CONTAINER_ID"
              docker stop \$CONTAINER_ID
              docker rm \$CONTAINER_ID
            else
              echo "Nenhum contêiner existente encontrado"
            fi
            
            # Iniciar o novo contêiner com o nome desejado
            echo "Iniciando o contêiner..."
            docker-compose up -d --remove-orphans --force-recreate || { echo "Erro ao iniciar o contêiner"; exit 1; }

            # Atraso para garantir que o contêiner foi iniciado
            sleep 5

            # Verificar o nome do contêiner e renomear se necessário
            NEW_CONTAINER_ID=\$(docker ps -q --filter "ancestor=frontend-dev:latest")
            if [ -n "\$NEW_CONTAINER_ID" ]; then
              echo "Contêiner iniciado com ID: \$NEW_CONTAINER_ID"
              echo "Renomeando o contêiner com o hash: $SHORT_HASH"
              docker rename \$NEW_CONTAINER_ID frontend-\$SHORT_HASH
            else
              echo "Erro: Nenhum contêiner encontrado para renomear"
              exit 1
            fi

            echo "Contêiner renomeado para: frontend-$SHORT_HASH"

          EOF

